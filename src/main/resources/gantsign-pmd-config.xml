<?xml version="1.0" encoding="UTF-8"?>
<ruleset name="gantsign"
    xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

  <description>GantSign PMD Rules.</description>

  <!-- ********************** -->
  <!-- *** Best Practices *** -->
  <!-- ********************** -->

  <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod"/>

  <!-- Used for the builder pattern -->
  <!-- <rule ref="category/java/bestpractices.xml/AccessorClassGeneration" /> -->

  <!-- Prefer security over minor performance loss -->
  <!-- <rule ref="category/java/bestpractices.xml/AccessorMethodGeneration" /> -->

  <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>
  <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace"/>
  <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>
  <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
  <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
  <rule ref="category/java/bestpractices.xml/ConstantsInInterface"/>
  <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
  <rule ref="category/java/bestpractices.xml/ForLoopCanBeForeach"/>

  <!-- Usually premature optimization -->
  <!-- <rule ref="category/java/bestpractices.xml/GuardLogStatement" /> -->

  <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
  <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>

  <!-- The overhead of adding these is more than the time saved when assertions fail -->
  <!-- <rule ref="category/java/bestpractices.xml/JUnitAssertionsShouldIncludeMessage" /> -->

  <!-- This just discourages people from writing thorough tests -->
  <!-- <rule ref="category/java/bestpractices.xml/JUnitTestContainsTooManyAsserts" /> -->

  <!-- Not if you're using the ExpectedException rule -->
  <!-- <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert" /> -->

  <!-- The ExpectedException rule should be preferred to the annotation parameter -->
  <!-- <rule ref="category/java/bestpractices.xml/JUnitUseExpected" /> -->

  <rule ref="category/java/bestpractices.xml/LooseCoupling"/>
  <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
  <rule ref="category/java/bestpractices.xml/MissingOverride"/>
  <rule ref="category/java/bestpractices.xml/OneDeclarationPerLine"/>
  <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
  <rule ref="category/java/bestpractices.xml/PositionLiteralsFirstInComparisons"/>
  <rule ref="category/java/bestpractices.xml/PreserveStackTrace"/>
  <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
  <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
  <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
  <rule ref="category/java/bestpractices.xml/SwitchStmtsShouldHaveDefault"/>
  <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
  <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>
  <rule ref="category/java/bestpractices.xml/UnusedImports"/>
  <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
  <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>
  <rule ref="category/java/bestpractices.xml/UseAssertEqualsInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertNullInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertSameInsteadOfAssertTrue"/>
  <rule ref="category/java/bestpractices.xml/UseAssertTrueInsteadOfAssertEquals"/>
  <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty"/>
  <rule ref="category/java/bestpractices.xml/UseVarargs"/>

  <!-- ****************** -->
  <!-- *** Code Style *** -->
  <!-- ****************** -->

  <rule ref="category/java/codestyle.xml/AbstractNaming"/>

  <!-- There's no point in explicitly declaring the default constructor -->
  <!-- <rule ref="category/java/codestyle.xml/AtLeastOneConstructor" /> -->

  <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>

  <!-- There are cases when you want the extra safety -->
  <!-- <rule ref="category/java/codestyle.xml/AvoidFinalLocalVariable" /> -->

  <rule ref="category/java/codestyle.xml/AvoidPrefixingMethodParameters"/>
  <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
  <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>

  <!-- This is rarely done without good reason -->
  <!-- <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode" /> -->

  <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>

  <!-- Unnecessarily verbose -->
  <!-- <rule ref="category/java/codestyle.xml/CallSuperInConstructor" /> -->

  <rule ref="category/java/codestyle.xml/ClassNamingConventions"/>

  <!-- Unnecessarily verbose and non standard -->
  <!-- <rule ref="category/java/codestyle.xml/CommentDefaultAccessModifier" /> -->

  <!-- I'd rather have a not null check with the default value last -->
  <!-- <rule ref="category/java/codestyle.xml/ConfusingTernary" /> -->

  <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
  <rule ref="category/java/codestyle.xml/DefaultPackage"/>
  <rule ref="category/java/codestyle.xml/DontImportJavaLang"/>
  <rule ref="category/java/codestyle.xml/DuplicateImports"/>
  <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
  <rule ref="category/java/codestyle.xml/ExtendsObject"/>
  <rule ref="category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass"/>
  <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>

  <!-- Deprecated - replaced with ControlStatementBraces -->
  <!-- <rule ref="category/java/codestyle.xml/ForLoopsMustUseBraces" /> -->

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/codestyle.xml/GenericsNaming" /> -->

  <!-- Deprecated - replaced with ControlStatementBraces -->
  <!-- <rule ref="category/java/codestyle.xml/IfElseStmtsMustUseBraces" /> -->
  <!-- <rule ref="category/java/codestyle.xml/IfStmtsMustUseBraces" /> -->

  <!-- Not using EJB -->
  <!-- <rule ref="category/java/codestyle.xml/LocalHomeNamingConvention" /> -->
  <!-- <rule ref="category/java/codestyle.xml/LocalInterfaceSessionNamingConvention" /> -->

  <!-- This just makes the code noisy & less readable -->
  <!-- <rule ref="category/java/codestyle.xml/LocalVariableCouldBeFinal" /> -->

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/codestyle.xml/LongVariable" /> -->

  <!-- Not using MDB -->
  <!-- <rule ref="category/java/codestyle.xml/MDBAndSessionBeanNamingConvention" /> -->

  <!-- This just makes the code noisy & less readable -->
  <!-- <rule ref="category/java/codestyle.xml/MethodArgumentCouldBeFinal" /> -->

  <rule ref="category/java/codestyle.xml/MethodNamingConventions"/>
  <rule ref="category/java/codestyle.xml/MIsLeadingVariableName"/>
  <rule ref="category/java/codestyle.xml/NoPackage"/>

  <!-- This makes the code less readable because you always have to read the method to the end -->
  <!-- <rule ref="category/java/codestyle.xml/OnlyOneReturn" /> -->

  <rule ref="category/java/codestyle.xml/PackageCase"/>
  <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>

  <!-- Not using EJB -->
  <!-- <rule ref="category/java/codestyle.xml/RemoteInterfaceNamingConvention" /> -->
  <!-- <rule ref="category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention" /> -->

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/codestyle.xml/ShortClassName" /> -->
  <!-- <rule ref="category/java/codestyle.xml/ShortMethodName" /> -->
  <!-- <rule ref="category/java/codestyle.xml/ShortVariable" /> -->

  <rule ref="category/java/codestyle.xml/SuspiciousConstantFieldName"/>

  <!-- I have no issues with static imports so long as it's clear what they are -->
  <!-- <rule ref="category/java/codestyle.xml/TooManyStaticImports" /> -->

  <rule ref="category/java/codestyle.xml/UnnecessaryAnnotationValueElement"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryConstructor"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
  <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
  <rule ref="category/java/codestyle.xml/UselessParentheses"/>
  <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
  <rule ref="category/java/codestyle.xml/VariableNamingConventions"/>

  <!-- Deprecated - replaced with ControlStatementBraces -->
  <!-- <rule ref="category/java/codestyle.xml/WhileLoopsMustUseBraces" /> -->

  <!-- ************** -->
  <!-- *** Design *** -->
  <!-- ************** -->

  <!-- Not serious enough to bother checking for -->
  <!-- <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod" /> -->

  <rule ref="category/java/design.xml/AvoidCatchingGenericException"/>
  <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
  <rule ref="category/java/design.xml/AvoidRethrowingException"/>
  <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
  <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
  <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
  <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
  <rule ref="category/java/design.xml/CollapsibleIfStatements"/>

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/CouplingBetweenObjects" /> -->
  <!-- <rule ref="category/java/design.xml/CyclomaticComplexity" /> -->

  <rule ref="category/java/design.xml/DataClass"/>
  <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
  <rule ref="category/java/design.xml/ExceptionAsFlowControl"/>

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/ExcessiveClassLength" /> -->
  <!-- <rule ref="category/java/design.xml/ExcessiveImports" /> -->
  <!-- <rule ref="category/java/design.xml/ExcessiveMethodLength" /> -->
  <!-- <rule ref="category/java/design.xml/ExcessiveParameterList" /> -->
  <!-- <rule ref="category/java/design.xml/ExcessivePublicCount" /> -->

  <rule ref="category/java/design.xml/FinalFieldCouldBeStatic"/>

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/GodClass" /> -->

  <rule ref="category/java/design.xml/ImmutableField"/>

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/LawOfDemeter" /> -->

  <rule ref="category/java/design.xml/LogicInversion"/>

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/LoosePackageCoupling" /> -->

  <!-- Deprecated -->
  <!-- <rule ref="category/java/design.xml/ModifiedCyclomaticComplexity" /> -->
  <!-- <rule ref="category/java/design.xml/NcssConstructorCount" /> -->

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/NcssCount" /> -->

  <!-- Deprecated -->
  <!-- <rule ref="category/java/design.xml/NcssMethodCount" /> -->
  <!-- <rule ref="category/java/design.xml/NcssTypeCount" /> -->

  <!-- TODO evaluate this rule -->
  <!-- <rule ref="category/java/design.xml/NPathComplexity" /> -->

  <rule ref="category/java/design.xml/SignatureDeclareThrowsException"/>
  <rule ref="category/java/design.xml/SimplifiedTernary"/>
  <rule ref="category/java/design.xml/SimplifyBooleanAssertion"/>
  <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
  <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
  <rule ref="category/java/design.xml/SimplifyConditional"/>
  <rule ref="category/java/design.xml/SingularField"/>

  <!-- Deprecated -->
  <!-- <rule ref="category/java/design.xml/StdCyclomaticComplexity" /> -->

  <rule ref="category/java/design.xml/SwitchDensity"/>

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/design.xml/TooManyFields" /> -->
  <!-- <rule ref="category/java/design.xml/TooManyMethods" /> -->

  <rule ref="category/java/design.xml/UselessOverridingMethod"/>

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/design.xml/UseObjectForClearerAPI" /> -->

  <rule ref="category/java/design.xml/UseUtilityClass"/>

  <!-- ********************* -->
  <!-- *** Documentation *** -->
  <!-- ********************* -->

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/documentation.xml/CommentContent" /> -->
  <!-- <rule ref="category/java/documentation.xml/CommentRequired" /> -->
  <!-- <rule ref="category/java/documentation.xml/CommentSize" /> -->
  <!-- <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor" /> -->
  <!-- <rule ref="category/java/documentation.xml/UncommentedEmptyMethodBody" /> -->

  <!-- ******************* -->
  <!-- *** Error Prone *** -->
  <!-- ******************* -->

  <!-- Useful for many I/O tasks -->
  <!-- <rule ref="category/java/errorprone.xml/AssignmentInOperand" /> -->

  <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic"/>

  <!-- Useful in tests and not likely to be used for production code -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration" /> -->

  <!-- This'll get caught by the compiler -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier" /> -->

  <rule ref="category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop"/>
  <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>
  <rule ref="category/java/errorprone.xml/AvoidCatchingNPE"/>
  <rule ref="category/java/errorprone.xml/AvoidCatchingThrowable"/>
  <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>

  <!-- Leave this to Checkstyle -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals" /> -->

  <!-- This'll get caught by the compiler -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidEnumAsIdentifier" /> -->

  <!-- Used in builder pattern -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName" /> -->

  <!-- Not worth bothering with -->
  <!-- <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName" /> -->

  <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>
  <rule ref="category/java/errorprone.xml/AvoidLiteralsInIfCondition"/>
  <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>
  <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
  <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
  <rule ref="category/java/errorprone.xml/BadComparison"/>
  <rule ref="category/java/errorprone.xml/BeanMembersShouldSerialize"/>
  <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>

  <!-- Call super() when and where necessary -->
  <!-- <rule ref="category/java/errorprone.xml/CallSuperFirst" /> -->
  <!-- <rule ref="category/java/errorprone.xml/CallSuperLast" /> -->

  <rule ref="category/java/errorprone.xml/CheckSkipResult"/>
  <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray"/>
  <rule ref="category/java/errorprone.xml/CloneMethodMustBePublic"/>
  <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>
  <rule ref="category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName"/>
  <rule ref="category/java/errorprone.xml/CloneThrowsCloneNotSupportedException"/>
  <rule ref="category/java/errorprone.xml/CloseResource"/>
  <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>
  <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod"/>
  <rule ref="category/java/errorprone.xml/DataflowAnomalyAnalysis"/>
  <rule ref="category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly"/>
  <rule ref="category/java/errorprone.xml/DoNotCallSystemExit"/>
  <rule ref="category/java/errorprone.xml/DoNotExtendJavaLangThrowable"/>

  <!-- Not worth bothering with -->
  <!-- <rule ref="category/java/errorprone.xml/DoNotHardCodeSDCard" /> -->

  <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
  <rule ref="category/java/errorprone.xml/DontImportSun"/>
  <rule ref="category/java/errorprone.xml/DontUseFloatTypeForLoopIndices"/>
  <rule ref="category/java/errorprone.xml/EmptyCatchBlock"/>
  <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
  <rule ref="category/java/errorprone.xml/EmptyFinallyBlock"/>
  <rule ref="category/java/errorprone.xml/EmptyIfStmt"/>
  <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
  <rule ref="category/java/errorprone.xml/EmptyStatementBlock"/>
  <rule ref="category/java/errorprone.xml/EmptyStatementNotInLoop"/>
  <rule ref="category/java/errorprone.xml/EmptySwitchStatements"/>
  <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
  <rule ref="category/java/errorprone.xml/EmptyTryBlock"/>
  <rule ref="category/java/errorprone.xml/EmptyWhileStmt"/>
  <rule ref="category/java/errorprone.xml/EqualsNull"/>
  <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>
  <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize"/>
  <rule ref="category/java/errorprone.xml/FinalizeOverloaded"/>
  <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected"/>
  <rule ref="category/java/errorprone.xml/IdempotentOperations"/>
  <rule ref="category/java/errorprone.xml/ImportFromSamePackage"/>
  <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
  <rule ref="category/java/errorprone.xml/InvalidSlf4jMessageFormat"/>
  <rule ref="category/java/errorprone.xml/JumbledIncrementer"/>
  <rule ref="category/java/errorprone.xml/JUnitSpelling"/>
  <rule ref="category/java/errorprone.xml/JUnitStaticSuite"/>
  <rule ref="category/java/errorprone.xml/LoggerIsNotStaticFinal"/>
  <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
  <rule ref="category/java/errorprone.xml/MissingBreakInSwitch"/>
  <rule ref="category/java/errorprone.xml/MissingSerialVersionUID"/>
  <rule ref="category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass"/>
  <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
  <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement"/>
  <rule ref="category/java/errorprone.xml/NonStaticInitializer"/>
  <rule ref="category/java/errorprone.xml/NullAssignment"/>
  <rule ref="category/java/errorprone.xml/OverrideBothEqualsAndHashcode"/>
  <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>
  <rule ref="category/java/errorprone.xml/ProperLogger">
    <properties>
      <!-- Loggers aren't constants so shouldn't be upper case -->
      <property name="staticLoggerName" value="log"/>
    </properties>
  </rule>
  <rule ref="category/java/errorprone.xml/ReturnEmptyArrayRatherThanNull"/>
  <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
  <rule ref="category/java/errorprone.xml/SimpleDateFormatNeedsLocale"/>
  <rule ref="category/java/errorprone.xml/SingleMethodSingleton"/>
  <rule ref="category/java/errorprone.xml/SingletonClassReturningNewInstance"/>

  <!-- Not using EJB -->
  <!-- <rule ref="category/java/errorprone.xml/StaticEJBFieldShouldBeFinal" /> -->

  <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
  <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
  <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="category/java/errorprone.xml/SuspiciousOctalEscape"/>
  <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases"/>
  <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
  <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>
  <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>
  <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary"/>
  <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals"/>
  <rule ref="category/java/errorprone.xml/UseCorrectExceptionLogging"/>
  <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
  <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>

  <!-- Rarely used on non-ASCII so let's avoid being unnecessarily verbose -->
  <!-- <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions" /> -->

  <rule ref="category/java/errorprone.xml/UseProperClassLoader"/>

  <!-- *********************** -->
  <!-- *** Multi-threading *** -->
  <!-- *********************** -->

  <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel"/>
  <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>

  <!-- Volatile serves a useful purpose -->
  <!-- <rule ref="category/java/multithreading.xml/AvoidUsingVolatile" /> -->

  <!-- Not using JavaEE -->
  <!-- <rule ref="category/java/multithreading.xml/DoNotUseThreads" /> -->

  <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>

  <!-- It works on recent versions of Java -->
  <!-- <rule ref="category/java/multithreading.xml/DoubleCheckedLocking" /> -->

  <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
  <rule ref="category/java/multithreading.xml/UnsynchronizedStaticDateFormatter"/>
  <rule ref="category/java/multithreading.xml/UseConcurrentHashMap"/>
  <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify"/>

  <!-- ******************* -->
  <!-- *** Performance *** -->
  <!-- ******************* -->

  <rule ref="category/java/performance.xml/AddEmptyString"/>
  <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>
  <rule ref="category/java/performance.xml/AvoidArrayLoops"/>
  <rule ref="category/java/performance.xml/AvoidFileStream"/>

  <!-- Premature optimization -->
  <!-- <rule ref="category/java/performance.xml/#AvoidInstantiatingObjectsInLoops" /> -->

  <rule ref="category/java/performance.xml/AvoidUsingShortType"/>
  <rule ref="category/java/performance.xml/BigIntegerInstantiation"/>
  <rule ref="category/java/performance.xml/BooleanInstantiation"/>
  <rule ref="category/java/performance.xml/ByteInstantiation"/>
  <rule ref="category/java/performance.xml/ConsecutiveAppendsShouldReuse"/>
  <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends"/>

  <!-- It's more object oriented than a utility method -->
  <!-- <rule ref="category/java/performance.xml/#InefficientEmptyStringCheck" /> -->

  <rule ref="category/java/performance.xml/InefficientStringBuffering"/>

  <!-- Premature optimization -->
  <!-- <rule ref="category/java/performance.xml/#InsufficientStringBufferDeclaration" /> -->

  <rule ref="category/java/performance.xml/IntegerInstantiation"/>
  <rule ref="category/java/performance.xml/LongInstantiation"/>
  <rule ref="category/java/performance.xml/OptimizableToArrayCall"/>
  <rule ref="category/java/performance.xml/RedundantFieldInitializer"/>
  <rule ref="category/java/performance.xml/ShortInstantiation"/>

  <!-- Reduces readability for minor performance gain -->
  <!-- <rule ref="category/java/performance.xml/SimplifyStartsWith" /> -->

  <rule ref="category/java/performance.xml/StringInstantiation"/>
  <rule ref="category/java/performance.xml/StringToString"/>
  <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement"/>
  <rule ref="category/java/performance.xml/UnnecessaryWrapperObjectCreation"/>
  <rule ref="category/java/performance.xml/UseArrayListInsteadOfVector"/>
  <rule ref="category/java/performance.xml/UseArraysAsList"/>
  <rule ref="category/java/performance.xml/UseIndexOfChar"/>
  <rule ref="category/java/performance.xml/UselessStringValueOf"/>
  <rule ref="category/java/performance.xml/UseStringBufferForStringAppends"/>
  <rule ref="category/java/performance.xml/UseStringBufferLength"/>

</ruleset>
